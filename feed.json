{
    "version": "https://jsonfeed.org/version/1",
    "title": "The Workshop",
    "subtitle": "",
    "icon": "https://the-m3chanic.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "https://the-m3chanic.github.io",
    "items": [
        {
            "id": "https://the-m3chanic.github.io/2024/05/17/GSoC-with-RTEMS-Week-1/",
            "url": "https://the-m3chanic.github.io/2024/05/17/GSoC-with-RTEMS-Week-1/",
            "title": "GSoC with RTEMS! - 1/n",
            "date_published": "2024-05-16T22:00:07.000Z",
            "content_html": "<h1 id=\"week-1\"><a class=\"anchor\" href=\"#week-1\">#</a> Week 1</h1>\n<h3 id=\"8524-15424\"><a class=\"anchor\" href=\"#8524-15424\">#</a> 8/5/24 - 15/4/24</h3>\n<p>Okay, just got accepted as a contributor for Google Summer of Code (given it was a few days back, but I instantly got sick after that and ended up on bedrest - quite a way to start off my journey! 😂 )</p>\n<p>Starting off, I already had a couple of things to get ticked off my checklist. I wanted to mainly set up a proper debugging environment, and also study various commonly used kernel structures - before diving deeper into my project. Since my project itself was to extend the functionality of the debugger, what good is it if I don't have a debugging environment setup in place?</p>\n<p>Let's jump right into my debugger setup then.</p>\n<p>I am working on a Windows 11 (x64), WSL2 (Arch) system. On top of this, I have the RTEMS tooling installed from the instructions in their <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnJ0ZW1zLm9yZy9icmFuY2hlcy9tYXN0ZXIvdXNlci9zdGFydC9zb3VyY2VzLmh0bWw=\">documentation</span>. On top of that, they provide a variety of options to build various BSPs (think of BSPs as housing for the OS to be embedded upon). I needed a build setup such that:</p>\n<ul>\n<li>I could compile RTEMS C++ programs at will</li>\n<li>GDB could debug those programs remotely through a remote emulator (either built in, or using <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucWVtdS5vcmc=\">Qemu</span>)</li>\n</ul>\n<p>First, to build a BSP. I had to make 2 important choices:</p>\n<ul>\n<li>Which architecture will I use?</li>\n<li>Which BSP will I use for said architecture? (Note: A single architecture can support multiple BSPs)</li>\n</ul>\n<p>I initially thought  <code>x86_64</code>  arch, along with any suitable BSP for that arch would have me good to go, but I was sadly mistaken. Not only did I struggle to find BSPs for  <code>x86_64</code> , but I also found that there were no test configurations (yet) for any of the  <code>x86_64</code>  BSPs 😦, so I decided not to proceed with that</p>\n<p>Next up, I chose the  <code>sparc</code>  arch, along with the  <code>erc32</code>  BSP, since that was one which seemed to have very good support for emulation and GDB support, and was also the one used in most of the examples mentioned in the docs. So I went ahead and built that.</p>\n<p><code>sparc</code>  has an emulator built in in RTEMS,  <code>sparc-rtems6-sis</code>  ( <code>sis</code> : Sparc Instruction Set Simulator), which can emulate the instructions of the RTEMS executable, and GDB can attach to the process through a TCP port.</p>\n<p>However, although compiling RTEMS C++ programs and running them worked perfectly on my  <code>sparc/erc32</code>  build, I couldn't debug (i.e, step through) code conveniently. I kept hitting some kind of data access violation exception, due to which RTEMS would have a fatal crash and exit. Sad.</p>\n<p>So I finalised on the  <code>arm/xilinx_zynq_a9_qemu</code>  BSP upon the suggestion of my mentor, which worked perfectly. So, I will be using that for the rest of this blog.</p>\n<p>First, a sample C++ program.<br />\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.cc </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;numeric&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> v = std::<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(<span class=\"number\">5</span>);</span><br><span class=\"line\">    std::<span class=\"built_in\">iota</span>(std::<span class=\"built_in\">begin</span>(v), std::<span class=\"built_in\">end</span>(v), <span class=\"number\">0</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : v) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; i &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>First off, RTEMS uses  <code>waf</code>  (an alternative to  <code>make</code> ), to build BSPs and applications on the platform. It's pretty versatile and easy to understand. You need 2 main things to build any app like this on RTEMS (apart from the source, of course) -  <code>waf</code>  (the script doing all the work) &amp;  <code>wscript</code>  (the waf script containing instructions to be executed). Apart from these 2 files, you would also need some dependency files, and an initialisation script.</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnJ0ZW1zLm9yZy9icmFuY2hlcy9tYXN0ZXIvdXNlci9zdGFydC9hcHAuaHRtbA==\">This</span> page in the documentation gives a pretty good overview on how one can build an app on RTEMS.</p>\n<p>Here is my  <code>wscript</code>  for all C++ applications like the one above:<br />\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># wscript </span></span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> print_function</span><br><span class=\"line\"></span><br><span class=\"line\">rtems_version = <span class=\"string\">&quot;6&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> rtems_waf.rtems <span class=\"keyword\">as</span> rtems</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;error: no rtems_waf git submodule&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">import</span> sys</span><br><span class=\"line\">    sys.exit(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">init</span>(<span class=\"params\">ctx</span>):</span><br><span class=\"line\">    rtems.init(ctx, version = rtems_version, long_commands = <span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bsp_configure</span>(<span class=\"params\">conf, arch_bsp</span>):</span><br><span class=\"line\">    <span class=\"comment\"># Add BSP specific configuration checks</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">options</span>(<span class=\"params\">opt</span>):</span><br><span class=\"line\">    rtems.options(opt)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">configure</span>(<span class=\"params\">conf</span>):</span><br><span class=\"line\">    rtems.configure(conf, bsp_configure = bsp_configure)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">build</span>(<span class=\"params\">bld</span>):</span><br><span class=\"line\">    rtems.build(bld)</span><br><span class=\"line\"></span><br><span class=\"line\">    bld(features = <span class=\"string\">&#x27;cxx cxxprogram&#x27;</span>,</span><br><span class=\"line\">        target = <span class=\"string\">&#x27;cxx_stdmap.exe&#x27;</span>,</span><br><span class=\"line\">        cxxflags = <span class=\"string\">&#x27;-std=c++11 -g -O2 -lstdc++&#x27;</span>,</span><br><span class=\"line\">        source = [<span class=\"string\">&#x27;main.cc&#x27;</span>, <span class=\"string\">&#x27;rtems_config.c&#x27;</span>])</span><br></pre></td></tr></table></figure></p>\n<p>The main function we need to focus on is  <code>build</code> . Note the  <code>features</code>  (type of program), and  <code>cxxflags</code>  parameters passed to the  <code>bld</code>  function.</p>\n<p>The application can be built with:</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># configure the waf for the BSP you are building for </span><br><span class=\"line\"></span><br><span class=\"line\">./waf configure --prefix=$HOME/quick-start/rtems/6 --rtems-bsps=arm/xilinx_zynq_a9_qemu</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># build the app</span><br><span class=\"line\"></span><br><span class=\"line\">./waf</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># run the executable to ensure it works</span><br><span class=\"line\"></span><br><span class=\"line\">rtems-run --rtems-bsps=xilinx_zynq_a9_qemu build/arm-rtems6-xilinx_zynq_a9_qemu/cxx_vectorfail.exe</span><br></pre></td></tr></table></figure></p>\n<p>Once you confirm that the app works, we can move onto debugging it.<br />\nFirst, for emulation, I went with qemu. I already had a  <code>qemu-system-arm</code>  setup so it seemed like the most logical option.</p>\n<p>Program can be emulated with:<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># machine type: xilinx-zynq-a9</span><br><span class=\"line\"># -m 256: 256 megabytes of memory for emulation</span><br><span class=\"line\"># no-reboot: prevents the machine from automatically rebooting after shutdown</span><br><span class=\"line\"># -serial null: serial port output is piped to /dev/null</span><br><span class=\"line\"># -serial mon:stdio : redirects serial monitor output through stdio </span><br><span class=\"line\"># -nographic: disables graphics </span><br><span class=\"line\"># -s: enables GDB to debug </span><br><span class=\"line\"># -S: starts up Qemu in a paused state, allowing GDB time to connect before execution begins </span><br><span class=\"line\"></span><br><span class=\"line\">qemu-system-arm -M xilinx-zynq-a9 -m \\</span><br><span class=\"line\">    256M -no-reboot -serial \\</span><br><span class=\"line\">    null -serial mon:stdio -nographic \\</span><br><span class=\"line\">    -s -S</span><br></pre></td></tr></table></figure></p>\n<p>On a separate terminal, connect to this emulator (default port: 1234)</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arm-rtems6-gdb &lt;app_path.exe&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># inside gdb </span><br><span class=\"line\">(gdb) target extended-remote localhost:1234 </span><br><span class=\"line\">(gdb) load</span><br><span class=\"line\">...</span><br><span class=\"line\"># any gdb command you want</span><br></pre></td></tr></table></figure></p>\n<p>More information on remote debugging can be found <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb3VyY2V3YXJlLm9yZy9nZGIvY3VycmVudC9vbmxpbmVkb2NzL2dkYi5odG1sL0Nvbm5lY3RpbmcuaHRtbA==\">here</span>.</p>\n<p>Voila! Debugging environment set up!</p>\n<p>Now, this is a pretty big process, with a lot of commands. This can be made easier, of course. Shell scripting for the win.</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ./setup.sh </span><br><span class=\"line\"># initialise environment to build the application </span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;[+] Installing waf...&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">curl https://waf.io/waf-2.0.19 &gt; waf</span><br><span class=\"line\">chmod +x waf</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;[+] Initialising repository and adding dependencies...&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">git init</span><br><span class=\"line\">git submodule add git://git.rtems.org/rtems_waf.git rtems_waf</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;[+] Configuring waf...&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">./waf configure --rtems=$HOME/quick-start/rtems/6 --rtems-bsp=arm/xilinx_zynq_a9_qemu</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;[+] Building application...&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">./waf</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;[+] Running application...&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">rtems-run --rtems-bsps=xilinx_zynq_a9_qemu build/arm-rtems6-xilinx_zynq_a9_qemu/cxx_vectorfail.exe</span><br></pre></td></tr></table></figure></p>\n<p>On a different terminal:<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qemu-system-arm -M xilinx-zynq-a9 -m \\</span><br><span class=\"line\">    256M -no-reboot -serial \\</span><br><span class=\"line\">    null -serial mon:stdio -nographic \\</span><br><span class=\"line\">    -s -S</span><br></pre></td></tr></table></figure></p>\n<p>Make a script called  <code>init.gdb</code> <br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target extended-remote localhost:1234</span><br><span class=\"line\">load</span><br></pre></td></tr></table></figure></p>\n<p>On the first terminal, create a new shell script<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ./loadgdb.sh</span><br><span class=\"line\">arm-rtems6-gdb -x init.gdb build/arm-rtems6-xilinx_zynq_a9_qemu/cxx_vectorfail.exe</span><br></pre></td></tr></table></figure></p>\n<p>I have all of these configured as commands on my terminal to make life easier, you could do that as well.</p>\n<p>In next week's blog, I will be diving straight into the main crux of my project - the issue at hand, and how I plan on fixing it, stay tuned!</p>\n",
            "tags": [
                "GSoC",
                "Embedded",
                "GDB",
                "Debugging",
                "Open source"
            ]
        },
        {
            "id": "https://the-m3chanic.github.io/2024/05/08/R2R-Ready-to-Run-Stomping-WTF/",
            "url": "https://the-m3chanic.github.io/2024/05/08/R2R-Ready-to-Run-Stomping-WTF/",
            "title": "R2R (Ready to Run) Stomping - WTF?",
            "date_published": "2024-05-08T02:39:58.000Z",
            "content_html": "<p>When the topic of executing <em>hidden</em> code comes up, one's mind often goes into techniques like process injection, C2 server shenanigans, polymorphic code, etc. But what if I tell you there is a method that can execute code that lies plain and simple in the binary, but you'll never see it?</p>\n<p>Before we get started on the juicy stuff, I'm afraid we'll need to learn some prerequisites first. If you happen to be an expert in the .NET compilation and runtime process, and also know how to read assembly, then I have some great news for you: you can skip past a bunch of stuff I'm about to talk about and jump right into Reversing it (although I'd appreciate you giving it a read for the 3 cans of chocolate milk that went into making this post).</p>\n<p>Okay, so let's jump right into it.</p>\n<h2 id=\"what-is-net\"><a class=\"anchor\" href=\"#what-is-net\">#</a> What is .NET?</h2>\n<p>Essentially, .NET is simply a framework developed by Microsoft. Early on, they realised that having different kinds of languages across different kind of platforms was going to get real messy real soon, so they decided to have a common ground for all of them to exist and thrive on: .NET.<br />\nIt helps to think of it as an abstraction layer. Developers don't have to bother about what platform they're writing their programs for (hardware/software, OS, graphics, optimisation, etc.), they can focus on writing good software, and if that software is capable of running on the .NET framework on one device, it is more than likely it will run on all other devices as well (where .NET is installed, of course). Everything from the different languages to the runtime engine - all come under .NET.</p>\n<p>Now that we've gotten that out of the way</p>\n<h2 id=\"what-are-the-different-ways-of-converting-source-to-machine-code\"><a class=\"anchor\" href=\"#what-are-the-different-ways-of-converting-source-to-machine-code\">#</a> What are the different ways of converting source to machine code?</h2>\n<p>Although I am aware there are tons of ways to &quot;compile&quot; code, this blog post is not about that, so I'm going to oversimplify it. We can broadly categorise this conversion into 3 different categories:</p>\n<ol>\n<li>Compiling (C, C++)</li>\n<li>Interpreting (Python)</li>\n<li>JIT Compiling (Java, C#)</li>\n</ol>\n<p><strong>Compiling</strong> - Turn all of your source code into machine code, and store it that way. Advantage? Code is super-fast, since everything is already in a form understood by your machine, and all necessary optimisations have been performed. Disadvantage? Even a small change in your code will warrant a full re-compile of the code to form a new binary, with new optimisations, which is a time consuming and pretty complex process for larger projects consisting of lots of binaries.</p>\n<p><strong>Interpreting</strong> - Think of this as translator between you and a person that speaks a foreign language, except the person speaking the foreign language is your CPU. There is a layer in the middle that &quot;interprets&quot; each line of your code as it executes in real time, and all checks (except syntax) are performed, and each line is independent of the other. Meaning, if I have a piece of code that looks like this:<br />\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1000000000</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;meow&quot;</span>)</span><br></pre></td></tr></table></figure></p>\n<p>The line containing the print statement would get interpreted by the translator 1000000000 different times, without it ever knowing it had just done that a couple nanoseconds back. This is an insane waste of time, because it repeating the same process over and over again, with applying 0 optimisations.</p>\n<p>That doesn't sound very nice, no? Why would you <em>not</em> optimise despite knowing that code is being repeated so much?<br />\nThat brings us to the next mode of conversion: JIT Compiling.</p>\n<p><strong>JIT Compiling</strong> - JIT (Just In Time) is a method of compilation, most popularly used by Java (Java Virtual Machine), so I will be taking Java as a reference when explaining this.<br />\nWhen the JVM is running, all methods are compiled in a tiered and on a need-basis. They all start out similar to an interpreter, where the JVM directly reads the bytecode of a single line and executes it. The catch, however, is when a specific unit (called the  <code>CompilerBroker</code>  in the JVM) decides that a method is being invoked very often, it compiles that specific method (known as a &quot;Hot method&quot;) into the next tier of compilation (the  <code>C1</code>  compiler), and then it is profiled (in order to apply further optimisations), and so on. Essentially, it can be thought of a rainbow land between compiling and interpreting, where code is only compiled on a per-need basis.</p>\n<p>So, in order of efficiency - we can arrange the above 3 methods in the following order:<br />\n <code>Compiling &gt;&gt; JIT Compilation &gt;&gt;&gt; Interpreting</code></p>\n<h2 id=\"okay-what-now\"><a class=\"anchor\" href=\"#okay-what-now\">#</a> Okay, what now?</h2>\n<p>Why did I discuss all this, though? Well, .NET happens to be mainly JIT Compiled, and just like how Java has the JVM (Java Virtual Machine), .NET has the CLR (Common Language Runtime) which handles JITting code.</p>\n<p>Through the years, .NET assembly has only contained the IL (Intermediate Language) code, which needs to be compiled and interpreted into its form of native code by the JIT Compiler after the application begins to run. As the .NET framework started expanding its support to more forms of hardware/software platforms, and was capable of building various kinds of applications, a lot of stress was put on Microsoft to improve the performance of the engine as it was the bottleneck for performance of the application as a whole. Some improvements were made, and one such improvement was AOT (Ahead of Time) compiling.</p>\n<h2 id=\"down-to-business\"><a class=\"anchor\" href=\"#down-to-business\">#</a> Down to business</h2>\n<p>There is a specific form of AOT Compiling, supported from .NET Core 3.0+, called R2R (Ready to Run). In this method, code is compiled and kept ahead of time. This kind of takes a lot of the weight off the runtime engine, since a lot of the code need not be compiled at runtime, and the pre-compiled code can be used instead. A lot of the original factors of the binary, like the metadata, and a bunch of old and new headers are required for this method as well (Why is this important? we'll find out).</p>\n<p>This introduces the issue.</p>\n<p>The code compiled ahead of time is obviously more efficient/optimal than the code the JIT engine would generate at runtime, and both of them would be more or less the same regardless. In R2R compiling, IL code is still produced, but it is not JIT compiled because the engine is smart enough to recognise and say, &quot;Hey! This (the compiled version of the code I want to execute) is already present, I can just use that!&quot;. The IL is only present there for our sake, but is never actually used. And this IL is the code that is used by popular decompilers like DnSpyEx/ILSpy to show us what any given .NET binary might be doing.</p>\n<p><img data-src=\"/images/post_images/R2R-Ready-to-Run-Stomping-WTF/image.png\" alt=\"do you see the problem here?\" /></p>\n<p>Are you seeing the issue yet?<br />\n(THE IL CODE WE SEE IS NEVER EVEN BEING USED!!)</p>\n<p>So what is really going on?</p>\n<h2 id=\"reverse-engineering-r2r-stomped-code\"><a class=\"anchor\" href=\"#reverse-engineering-r2r-stomped-code\">#</a> Reverse Engineering R2R Stomped code</h2>\n<p>I will explain with the help of 2 challenges that utilised this very technique:  <code>Trompeloeil</code>  from  <code>Insomni'hack teaser 2024</code> , and  <code>Delirium</code>  from  <code>AOFCTF 24</code>  (the latter being a challenge made by a friend of mine, <span class=\"exturl\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9oZXhhbWluZTIy\">hexamine22</span>, which later inspired me to make this blog).</p>\n<p>Let's take a look at the second one 1st, Delirium.</p>\n<p>Opening up the file in CFF Explorer, and heading over to the  <code>.NET Directory</code> , and checking the offset of the ManagedNativeHeader RVA, we can see that adding 8 and checking the DWORD at that location tells us what kind of format this specific dll was compiled in.</p>\n<p><img data-src=\"/images/post_images/R2R-Ready-to-Run-Stomping-WTF/image-1.png\" alt=\"cff explorer delirium\" /></p>\n<p>Opening the same offset (+8) in a hex editor like GHEX, we can see this</p>\n<p><img data-src=\"/images/post_images/R2R-Ready-to-Run-Stomping-WTF/image-2.png\" alt=\"delirium ghex\" /></p>\n<p>The part we need to focus on here is to see that the value of the DWORD is 0x00525452 (&quot;RTR&quot;), signifying that this dll was compiled in the Ready to Run format.</p>\n<p>Opening up the decompiled code in ILSpy, we get something very peculiar:</p>\n<p><img data-src=\"/images/post_images/R2R-Ready-to-Run-Stomping-WTF/image-3.png\" alt=\"ilspy delirium\" /></p>\n<p>What? Just a md5 hash check for the flag? That doesn't seem right 🤔</p>\n<p>A wise man once said...</p>\n<p><code>When in doubt, read the assembly</code>  (in this case, the IL will suffice)</p>\n<p><img data-src=\"/images/post_images/R2R-Ready-to-Run-Stomping-WTF/image-4.png\" alt=\"ilspy assembly delirium\" /></p>\n<p><img data-src=\"/images/post_images/R2R-Ready-to-Run-Stomping-WTF/image-6.png\" alt=\"tom sus\" /></p>\n<p>Hmm, looks odd. Why are there so many  <code>nop</code>  instructions? Something seems wrong here.</p>\n<p>Thankfully, ILSpy has an option to show us Ready to Run assembly code (the one that's pre-compiled) for binaries that are compiled that way, and since our binary is an RTR one, it should be available.</p>\n<p><img data-src=\"/images/post_images/R2R-Ready-to-Run-Stomping-WTF/image-7.png\" alt=\"ilspy r2r delirium\" /></p>\n<p>This disassembly is completely different from what the C# decompilation showed us... wtf?</p>\n<p>From this, we can conclude one thing:<br />\n<img data-src=\"/images/post_images/R2R-Ready-to-Run-Stomping-WTF/image-8.png\" alt=\"bamboozled\" /></p>\n<p>Given that we can read this assembly, there are multiple ways to progress with solving the challenge now.</p>\n<ol>\n<li>Static analysis - Read the disassembly and figure out what is going on (boring ❌)</li>\n<li>Dynamic analysis - Debug and set a breakpoint at the dll main in IDA (or any debugger of your choice, I prefer IDA), and examine variables at runtime (the method we will be following ✅)</li>\n</ol>\n<p>So how do we do that?</p>\n<p>We can use this reasoning: The binary asks us for input, and that happens from the dll. Unless the input is entered, none of the actual logic happens, we can be sure of that from the disassembly. So, we can run the  <code>Delirium.exe</code>  file, and let it run until it stops and asks us for input - that is when we can be sure that the control flow has switched over to the DLL.</p>\n<p>Let us do that first.</p>\n<p>(Note: If you come across any exceptions being generated when letting the exe run, just pass them to the application. Those are general exceptions that come from control flow switching between different threads in the presence of a debugger)</p>\n<p>Now we need to find our dll main.</p>\n<p>View &gt; Open Subviews &gt; Segments will show us every segment of every file currently loaded<br />\nSearch for  <code>Delirium.dll</code>  among those, and look for the CODE section in those.</p>\n<p><img data-src=\"/images/post_images/R2R-Ready-to-Run-Stomping-WTF/image-9.png\" alt=\"ida segments view delirium\" /></p>\n<p>With some quick pwntools, we can grep for the bytes of the first couple of instructions of our dll's main.</p>\n<p><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> * </span><br><span class=\"line\"></span><br><span class=\"line\">assembly = <span class=\"string\">&quot;&quot;&quot;push r15</span></span><br><span class=\"line\"><span class=\"string\">push r14</span></span><br><span class=\"line\"><span class=\"string\">push r12</span></span><br><span class=\"line\"><span class=\"string\">push rdi</span></span><br><span class=\"line\"><span class=\"string\">push rsi</span></span><br><span class=\"line\"><span class=\"string\">push rbp&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(asm(assembly))</span><br><span class=\"line\"><span class=\"comment\"># output: b&#x27;AWAVATWVU&#x27;</span></span><br></pre></td></tr></table></figure></p>\n<p>Once you get to the start of the CODE section of the dll (the 1st one if more than one exist), simply click  <code>Alt+b</code>  in IDA (to search for bytes), and paste  <code>&quot;AWAVATWVU&quot;</code>  (with the quotes, since it's a byte string). Of all the results that show up, click on the one that are present in  <code>Delirium.dll</code> .</p>\n<p><img data-src=\"/images/post_images/R2R-Ready-to-Run-Stomping-WTF/image-10.png\" alt=\"search view results\" /></p>\n<p>Double-clicking will lead you to a bunch of bytes, but that is only because IDA is interpreting those bytes as data, and not code. To tell it to read them as code, put your mouse over there and hit C (convert to code).</p>\n<p><img data-src=\"/images/post_images/R2R-Ready-to-Run-Stomping-WTF/image-11.png\" alt=\"undefined code\" /></p>\n<p>After hitting c</p>\n<p><img data-src=\"/images/post_images/R2R-Ready-to-Run-Stomping-WTF/image-12.png\" alt=\"make code\" /></p>\n<p>And to be able to decompile this assembly, IDA needs to see this code block as a function, so place your cursor at the start of the code block, and hit P (mark start of function).</p>\n<p>Then you should be able to decompile.</p>\n<p>Although, since none of the symbols are resolved, we won't know the names of the native libraries being called, so we'll have to make sense of things for ourselves.</p>\n<p>After a bit of debugging and reversing, we can find that this challenge is pretty easy - it takes your input, XORs it with a predefined text, and multiplies it with another matrix and checks with a predefined matrix. Pretty simple stuff to reverse.</p>\n<p>Now, we seem to have a fixed way of dealing with binaries like this, here's a recap:</p>\n<ul>\n<li>Confirm R2R mode through offset</li>\n<li>Open up in ILSpy</li>\n<li>Grab bytes of starting few instructions of &quot;stomped code&quot;</li>\n<li>Run binary in IDA until it stops for input</li>\n<li>Locate dll segment in IDA</li>\n<li>Search for said bytes in IDA</li>\n<li>Mark code</li>\n<li>Mark function</li>\n<li>Decompile</li>\n<li>Profit!</li>\n</ul>\n<h2 id=\"asserting-dominance-over-r2r-compiled-binaires\"><a class=\"anchor\" href=\"#asserting-dominance-over-r2r-compiled-binaires\">#</a> Asserting dominance over R2R compiled binaires</h2>\n<p>Let us try this approach on another binary,  <code>Trompeloeil</code>  from  <code>Insomni'hack teaser 2024</code></p>\n<p>First, grab the offset<br />\n<img data-src=\"/images/post_images/R2R-Ready-to-Run-Stomping-WTF/image-13.png\" alt=\"cff explorer trompeloeil\" /></p>\n<p>Next, check if it's in &quot;RTR&quot; mode<br />\n<img data-src=\"/images/post_images/R2R-Ready-to-Run-Stomping-WTF/image-14.png\" alt=\"ghex trompeloeil\" /></p>\n<p>(Note: You can also do a quick confirmation to make sure things look suspicious, like here for example)<br />\n<img data-src=\"/images/post_images/R2R-Ready-to-Run-Stomping-WTF/image-15.png\" alt=\"assembly trompeloeil\" /><br />\nToo many nops, like last time</p>\n<p>Grab the first few bytes of the function<br />\n<img data-src=\"/images/post_images/R2R-Ready-to-Run-Stomping-WTF/image-16.png\" alt=\"trompeloeil asm \" /></p>\n<p>Look for the CODE section of the dll segment in IDA<br />\n<img data-src=\"/images/post_images/R2R-Ready-to-Run-Stomping-WTF/image-17.png\" alt=\"dll sections ida trompeloeil\" /></p>\n<p>Start your search from there.<br />\nMost likely, you'll have multiple results, but only one that corresponds to your dll, catch that one<br />\n<img data-src=\"/images/post_images/R2R-Ready-to-Run-Stomping-WTF/image-18.png\" alt=\"search view results trompeloeil\" /></p>\n<p>Convert to code (hit C)<br />\n<img data-src=\"/images/post_images/R2R-Ready-to-Run-Stomping-WTF/image-20.png\" alt=\"make code trompeloeil\" /></p>\n<p>Mark as function (hit P)<br />\n<img data-src=\"/images/post_images/R2R-Ready-to-Run-Stomping-WTF/image-21.png\" alt=\"make function trompeloeil\" /></p>\n<p>Decompile!</p>\n<p>Congratulations, you have successfully Reverse-Engineered an R2R obfuscated binary. You can give yourself <em>upto</em> 2 pats on the back.</p>\n<p><img data-src=\"/images/post_images/R2R-Ready-to-Run-Stomping-WTF/imagex.png\" alt=\"alt text\" /></p>\n<p>All in all, this is an interesting and novel way to hide what you're doing in your .NET binary. Very fascinating approach, and if you guys have any doubts with regards to anything I've mentioned here - you can always reach on <span class=\"exturl\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS90aGVfbTNjaGFuaWNf\">Twitter</span>. Cheers.</p>\n",
            "tags": [
                "Technical",
                "R2R",
                "Security",
                "C#",
                ".NET"
            ]
        },
        {
            "id": "https://the-m3chanic.github.io/2024/02/26/Writeup-t0y-b0x-bi0sCTF-2024/",
            "url": "https://the-m3chanic.github.io/2024/02/26/Writeup-t0y-b0x-bi0sCTF-2024/",
            "title": "Writeup - t0y-b0x - bi0sCTF 2024",
            "date_published": "2024-02-26T17:09:06.000Z",
            "content_html": "<p><strong>tl;dr</strong></p>\n<ul>\n<li>Binary obfuscation with hidden anti-debug checks</li>\n<li>Linear Cryptanalysis (AES with linearly dependent SBOX)</li>\n</ul>\n<p><span id=\"more\"></span></p>\n<p><strong>Challenge points</strong>: 758<br />\n<strong>No. of solves</strong>: 21<br />\n<strong>Challenge Author(s)</strong> : <span class=\"exturl\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9TYXJpbktyaXNobmFuUg==\">Sans</span>, <span class=\"exturl\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS90aGVfbTNjaGFuaWNf\">the.m3chanic</span></p>\n<h2 id=\"challenge-description\"><a class=\"anchor\" href=\"#challenge-description\">#</a> Challenge description:</h2>\n<p>All my toys are shuffled 😦</p>\n<h2 id=\"initial-analysis\"><a class=\"anchor\" href=\"#initial-analysis\">#</a> Initial Analysis</h2>\n<p>We're given a stripped C binary along with a  <code>ciphertext.txt</code> .</p>\n<p><img data-src=\"/images/post_images/Writeup-t0y-b0x-bi0sCTF-2024/image.png\" alt=\"alt text\" /></p>\n<p>We see that the binary is asking for up to 16 bytes of input followed by upto 1024 bytes in the next line - already kind of suspicious, hints AES, but let's see.</p>\n<p>Now right off the bat, there's a conditional check to set an array to one or the other value based on a global variable, let's check that out.</p>\n<p><img data-src=\"/images/post_images/Writeup-t0y-b0x-bi0sCTF-2024/image-1.png\" alt=\"alt text\" /></p>\n<p>There are only 2 xrefs to this global symbol, one of them which we are currently checking out - whereas the other one seems to be in another function.</p>\n<p>IDA is unable to decompile it properly, but it says that the function has inline assembly present in it - let's look at that.</p>\n<p><img data-src=\"/images/post_images/Writeup-t0y-b0x-bi0sCTF-2024/image-2.png\" alt=\"alt text\" /></p>\n<p>This looks like a fancy way of setting up a syscall, specifically  <code>ptrace</code> , so it's an anti-debug check.<br />\nWe can simply patch the jump condition, or nop out this entire function itself - up to whoever is reversing it.</p>\n<p>The output of this function seems to change the values that a specific array is set to, which we'll find to be important later.<br />\nAdditionally, the array that is being set is of length 256, another AES hint.</p>\n<p>The array that is copied into this is initialised from another function, which you can analyse by debugging and see that all it does is initialise an array with values from 0-255.</p>\n<p><img data-src=\"/images/post_images/Writeup-t0y-b0x-bi0sCTF-2024/image-3.png\" alt=\"alt text\" /></p>\n<p>This looks like the mix columns function from AES, it also calls the  <code>coef_mult</code>  that is implemented in AES.</p>\n<p>At this point we can conclude that this binary is implementing AES, but with some modifications to it. The only modification being that the SBOX being used in it is linear (0, 1, 2...255). We can find this out by inspecting the arguments being passed to the  <code>aes_encrypt</code>  function in main.</p>\n<h2 id=\"solving-linear-aes\"><a class=\"anchor\" href=\"#solving-linear-aes\">#</a> Solving linear AES</h2>\n<p>Looking at the implementation of the  <code>sub_bytes</code>  function in the binary, we can see this<br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sub_bytes</span><span class=\"params\">(<span class=\"type\">uint8_t</span> *state)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">uint8_t</span> i, j;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; Nb; j++) &#123;</span><br><span class=\"line\">\t\t\tstate[Nb*i+j] = s_box[state[Nb*i+j]];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>This is the only non-linear part of AES, and it's what makes AES resistant to linear attacks. The standard SBOX was designed with this in mind. In this binary, however, we use a linear SBOX.</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>B</mi><mi>O</mi><mi>X</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>⊕</mo><mi>j</mi><mo>⊕</mo><mn>0</mn><mo stretchy=\"false\">]</mo><mo>=</mo><mi>S</mi><mi>B</mi><mi>O</mi><mi>X</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>⊕</mo><mi>S</mi><mi>B</mi><mi>O</mi><mi>X</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>⊕</mo><mi>S</mi><mi>B</mi><mi>O</mi><mi>X</mi><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">SBOX[i \\oplus j \\oplus 0] = SBOX[i] \\oplus SBOX[j] \\oplus SBOX[0]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span></span></span></span></p>\n<p>The new substitution box can be represented as a linear operation on bits, with just XORs and shuffling bits. Because of this - the AES encryption operation is now affine. Since the first block of plaintext and ciphertext, you can construct a matrix and recover the key this way, using it to decrypt the rest of the ciphertext.</p>\n<p>You can refer to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oYWNrbWQuaW8vQHZpc2hpc3dvei9yMTBQN2tud2o=\">this</span> and <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rZXZpbmxpdS5tZS9wb3N0cy9saW5lYXItY3J5cHRhbmFseXNpcy8=\">this</span> article for more information on this vulnerability.</p>\n<p>Overall, this was an easy to medium challenge, with just some obfuscation to hide some things being generated in the binary and a vulnerable implementation of AES being implemented. I hope you guys had fun solving the challenge and learnt something new from it as well! 😃</p>\n",
            "tags": [
                "Writeup",
                "reversing",
                "bi0sCTF",
                "writeup",
                "crypto",
                "AES"
            ]
        },
        {
            "id": "https://the-m3chanic.github.io/2024/02/26/Writeup-beehive-bi0sCTF-2024/",
            "url": "https://the-m3chanic.github.io/2024/02/26/Writeup-beehive-bi0sCTF-2024/",
            "title": "Writeup - beehive - bi0sCTF 2024",
            "date_published": "2024-02-26T03:23:31.000Z",
            "content_html": "<p><strong>tl;dr</strong></p>\n<ul>\n<li>Custom hook to syscall 0x31337 using eBPF</li>\n<li>Check on the argument passed to syscall to verify correct/incorrect key</li>\n</ul>\n<h2 id=\"challenge-description\"><a class=\"anchor\" href=\"#challenge-description\">#</a> Challenge description:</h2>\n<p>according to all known laws of aviation, there is no way a bee should be able to fly</p>\n<p>In this writeup I'll be covering the challenge I authored for bi0s CTF, 2024.<br />\nI intended for this to be an easy warmup challenge for the players, and hopefully some people learned some new stuff from it as well 😃</p>\n<h2 id=\"initial-analysis\"><a class=\"anchor\" href=\"#initial-analysis\">#</a> Initial Analysis</h2>\n<p>In the handout, there is a single file,  <code>beehive.o</code> , let's take a look at what kind of file it is</p>\n<p><img data-src=\"/images/post_images/Writeup-beehive-bi0sCTF-2024/image.png\" alt=\"file type\" /></p>\n<p>So it's an ELF file, but of type eBPF. What is eBPF?</p>\n<p>(I'm going to dive a little deep into eBPF and things surrounding it. If you're only here for the solution to the challenge, you can skip to the <a href=\"#the-solution\">solution</a>)</p>\n<h2 id=\"understanding-ebpf\"><a class=\"anchor\" href=\"#understanding-ebpf\">#</a> Understanding eBPF</h2>\n<p>eBPF is a technology that can be used in the Linux kernel that is like running a very tightly bound (ability-wise) program directly in the kernel space. It is an event-driven language that can be used to hook kernel actions and perform specific tasks.</p>\n<p>It runs natively in the kernel space with the help of a JIT compiler.</p>\n<p>It’s basically a kernel level virtual machine that allows for programming of certain kernel level tasks, such as packet filtering, tracing, etc. Essentially a small computer inside the kernel that can run custom programs with restricted access.</p>\n<p>Basically, think of it as a Kernel level javascript running inside a restrictive VM.</p>\n<p>The obvious question that might come in your mind is - <strong>How is eBPF different from normal kernel drivers or kernel modules</strong>?</p>\n<p>Well, the answer to that is simple:<br />\neBPF programs don’t have nearly the amount of permissions as a regular kernel module, so you could say that they run in a much more constrained environment. They can’t make any drastic changes to the behaviour of the kernel, so this adds to their security and can help in reducing crashes. It’s  perfectly in between a user program and a kernel program, in the sense that it runs in the kernel space, but with restrictions that differentiate it from an actual kernel module.</p>\n<p>Now that we've got the basics out of the way, let's get back to solving the challenge.</p>\n<h2 id=\"our-approach\"><a class=\"anchor\" href=\"#our-approach\">#</a> Our Approach</h2>\n<p>Some google searches tell us that eBPF can be disassembled using  <code>llvm</code> , so let's give that a try</p>\n<p><img data-src=\"/images/post_images/Writeup-beehive-bi0sCTF-2024/image-1.png\" alt=\"llvm output\" /></p>\n<p>Sure enough, we get the output, and in that we see a function called  <code>weird_function</code> , now let's take a look at what it does</p>\n<p>One thing to keep in mind is: eBPF has its own instruction set architecture, so everything from registers to calling convention will be different</p>\n<p>Quick overview of eBPF architecture:<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eBPF is a RISC register machine with 11 registers in total. Each 64-bits in size. </span><br><span class=\"line\"></span><br><span class=\"line\">9 of these registers are general purpose, with arbitrary read-write over each of them. One register is a read-only stack pointer, and one implicit program counter (in the sense, we can only jump to a particular offset with it). </span><br><span class=\"line\"></span><br><span class=\"line\">The VM registers are always 64-bits wide, even if it’s running on a 32-bit processor, the rest of the bits are just zeroed out in that case. </span><br><span class=\"line\"></span><br><span class=\"line\">r0 register holds the return value of helper function calls</span><br><span class=\"line\"></span><br><span class=\"line\">r1-r5 hold the function arguments for kernel function calls, r6-r9 are callee saved registers </span><br><span class=\"line\"></span><br><span class=\"line\">r0 also stores the exit value when the eBPF program exits from the kernel.</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"understanding-the-challenge\"><a class=\"anchor\" href=\"#understanding-the-challenge\">#</a> Understanding the challenge</h2>\n<p>Now, the first few instructions from the dump kind of give us an idea of what's going on here.</p>\n<p>A bunch of stuff is loaded on the stack first, following which the last value loaded on top is later compared to 0x31337.</p>\n<p>In eBPF, whenever a syscall is made, arguments passed to the syscall are pushed on the stack in reverse order, and the syscall number is pushed last (i.e, at the top). We can see that our program is doing something similar here.</p>\n<p>We know that eBPF harbours the capability to hook onto syscalls on the kernel, so could it be possible that it is trying to hook onto syscall 0x31337?<br />\nLet's confirm that hunch.</p>\n<p>A failed comparison of the syscall number with 0x31337 leads us to label-18, which is</p>\n<p><img data-src=\"/images/post_images/Writeup-beehive-bi0sCTF-2024/image-2.png\" alt=\"exit label\" /></p>\n<p>So I think we would need to make the syscall number 0x31337 to interact with this program. But what do we pass to it?</p>\n<p><img data-src=\"/images/post_images/Writeup-beehive-bi0sCTF-2024/image-3.png\" alt=\"strings output\" /></p>\n<p>Seems like the program is asking for a key, and verifies that key for us.</p>\n<p>Obviously the entire program can't be efficiently analysed using just the object dump, so I will switch to IDA PRO for the remainder of this writeup.<br />\nBy default, IDA is not capable of recognising this machine type, but there is a handy <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2N5bGFuY2UvZUJQRl9wcm9jZXNzb3I=\">processor</span> plugin that supports eBPF.</p>\n<p>The output still doesn't look too clean on IDA, so we can run the scripts on the processor repo to relocate maps and clean up eBPF helper calls for us.</p>\n<p>(To run script files on IDA: File -&gt; Script file -&gt; <span class=\"exturl\" data-url=\"aHR0cDovL2ZpbGVuYW1lLnB5\">filename.py</span>)</p>\n<p>The first few blocks of the disassembly seem to be telling us some pretty obvious things, it takes input, copies it to a kernel land string, then stores it.</p>\n<p>How does it reference it though?<br />\nLet's look at this logically - we know the binary has a print statement somewhere, and it prints 1 of 2 things</p>\n<p><img data-src=\"/images/post_images/Writeup-beehive-bi0sCTF-2024/image-5.png\" alt=\"correct incorrect print\" /></p>\n<p>How is it referencing the correct and incorrect strings?</p>\n<p>We can see some constants being loaded into  <code>r1</code>  in each block, and that constant just happens to be the offset of the strings &quot;Key is correct!&quot; and &quot;Key is incorrect!&quot;, from the .rodata section.  <code>r2</code>  just holds the length of the string to be printed.</p>\n<p>I don't want to get into too much detail about assembly level reversing here, so I will mention the required details, while trying to retain as much information as possible<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r1 --&gt; loop counter for byte by byte encryption</span><br><span class=\"line\">r2 --&gt; contains the pointer to current encrypted byte </span><br><span class=\"line\">r3 --&gt; is_correct flag </span><br></pre></td></tr></table></figure></p>\n<p>And, a python (almost line-by-line) representation of the encryption is as follows:<br />\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">check</span>(<span class=\"params\">r5</span>):</span><br><span class=\"line\">    r7 = r5</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[*] Initial state of r5: <span class=\"subst\">&#123;<span class=\"string\">&#x27;&#123;:08b&#125;&#x27;</span>.<span class=\"built_in\">format</span>(r5)&#125;</span>&quot;</span>)</span><br><span class=\"line\">    r7 &amp;= <span class=\"number\">15</span></span><br><span class=\"line\">    r7 &lt;&lt;= <span class=\"number\">4</span></span><br><span class=\"line\">    r5 &amp;= <span class=\"number\">240</span></span><br><span class=\"line\">    r5 &gt;&gt;= <span class=\"number\">4</span></span><br><span class=\"line\">    r5 |= r7</span><br><span class=\"line\">    r7 = r5</span><br><span class=\"line\">    r7 &amp;= <span class=\"number\">51</span></span><br><span class=\"line\">    r7 &lt;&lt;= <span class=\"number\">2</span></span><br><span class=\"line\">    r5 &gt;&gt;= <span class=\"number\">2</span></span><br><span class=\"line\">    r5 &amp;= <span class=\"number\">51</span></span><br><span class=\"line\">    r5 |= r7</span><br><span class=\"line\">    r7 = r5</span><br><span class=\"line\">    r7 &amp;= <span class=\"number\">85</span></span><br><span class=\"line\">    r7 &lt;&lt;= <span class=\"number\">1</span></span><br><span class=\"line\">    r5 &gt;&gt;= <span class=\"number\">1</span></span><br><span class=\"line\">    r5 &amp;= <span class=\"number\">85</span></span><br><span class=\"line\">    r5 |= r7</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;\\n\\n[*] Final state of r5: <span class=\"subst\">&#123;<span class=\"string\">&#x27;&#123;:08b&#125;&#x27;</span>.<span class=\"built_in\">format</span>(r5)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"interacting-with-the-program\"><a class=\"anchor\" href=\"#interacting-with-the-program\">#</a> Interacting with the program?</h2>\n<p>This is all very nice, but what's a program that you cannot interact with?</p>\n<p>Well, since this is an eBPF program, it'll have to be loaded on the kernel and get past the verifier first, before we can actually make the syscall  <code>0x31337</code>  to trigger it.</p>\n<p>How do we do that?</p>\n<p>You can use this loader file to load the program and simultaneously read  <code>trace_pipe</code>  (where the outputs of  <code>bpf_trace_printk</code> ) are logged.</p>\n<p>(Run this shell script first)</p>\n<p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo clang -O2 -target bpf -D__TARGET_ARCH_x86_64 -I . -c <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span>_challenge.c -o <span class=\"variable\">$1</span>.o</span><br><span class=\"line\">sudo bpftool gen skeleton <span class=\"variable\">$1</span>.o &gt; <span class=\"variable\">$1</span>.skel.h</span><br><span class=\"line\">sudo clang -g -O2 -Wall -I . -c loader.c -o loader.o</span><br><span class=\"line\">sudo clang -Wall -O2 -g loader.o libbpf/build/libbpf/libbpf.a -lelf -lz -o loader</span><br><span class=\"line\">sudo ./loader</span><br></pre></td></tr></table></figure></p>\n<p>(Then, run this file to load the program)<br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/resource.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bpf/libbpf.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bpf/bpf.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;final.skel.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">read_trace_pipe</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> trace_fd;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttrace_fd = open(<span class=\"string\">&quot;/sys/kernel/debug/tracing/trace_pipe&quot;</span>, O_RDONLY, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (trace_fd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">static</span> <span class=\"type\">char</span> buf[<span class=\"number\">4096</span>];</span><br><span class=\"line\">\t\t<span class=\"type\">ssize_t</span> sz;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsz = read(trace_fd, buf, <span class=\"keyword\">sizeof</span>(buf) - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (sz &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tbuf[sz] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">puts</span>(buf);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"keyword\">final</span> *<span class=\"title\">obj</span>;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> err = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">rlimit</span> <span class=\"title\">rlim</span> =</span> &#123;</span><br><span class=\"line\">\t\t.rlim_cur = <span class=\"number\">512UL</span> &lt;&lt; <span class=\"number\">20</span>,</span><br><span class=\"line\">\t\t.rlim_max = <span class=\"number\">512UL</span> &lt;&lt; <span class=\"number\">20</span>,</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = setrlimit(RLIMIT_MEMLOCK, &amp;rlim);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;failed to change rlimit\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tobj = final__open();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!obj) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;failed to open and/or load BPF object\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = final__load(obj);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;failed to load BPF object %d\\n&quot;</span>, err);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> cleanup;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = final__attach(obj);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;failed to attach BPF programs\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> cleanup;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tread_trace_pipe();</span><br><span class=\"line\"></span><br><span class=\"line\">cleanup:</span><br><span class=\"line\">\tfinal__destroy(obj);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> err != <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Once loaded, you can write a python program to trigger the syscall with the arguments that you want to test it out (I used the   <code>ctypes</code>  module for this)</p>\n<p>&lt;br&gt;</p>\n<h2 id=\"the-solution\"><a class=\"anchor\" href=\"#the-solution\">#</a> The Solution</h2>\n<p>Once you understand how the program manipulates your input, reversing it becomes quite trivial. The program simply takes each byte of your input, flips the bits (8 padded), then compares it with a preexisting array.</p>\n<p><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compArray = [<span class=\"number\">86</span>, <span class=\"number\">174</span>, <span class=\"number\">206</span>, <span class=\"number\">236</span>, <span class=\"number\">250</span>, <span class=\"number\">44</span>, <span class=\"number\">118</span>, <span class=\"number\">246</span>, <span class=\"number\">46</span>, <span class=\"number\">22</span>, <span class=\"number\">204</span>, <span class=\"number\">78</span>, <span class=\"number\">250</span>, <span class=\"number\">174</span>, <span class=\"number\">206</span>, <span class=\"number\">204</span>, <span class=\"number\">78</span>, <span class=\"number\">118</span>, <span class=\"number\">44</span>, <span class=\"number\">182</span>, <span class=\"number\">166</span>, <span class=\"number\">2</span>, <span class=\"number\">70</span>, <span class=\"number\">150</span>, <span class=\"number\">12</span>, <span class=\"number\">206</span>, <span class=\"number\">116</span>, <span class=\"number\">150</span>, <span class=\"number\">118</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> compArray: </span><br><span class=\"line\">    i = <span class=\"string\">&#x27;&#123;:08b&#125;&#x27;</span>.<span class=\"built_in\">format</span>(i) </span><br><span class=\"line\">    i = i[::-<span class=\"number\">1</span>]</span><br><span class=\"line\">    i = <span class=\"built_in\">int</span>(i, <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">chr</span>(i), end = <span class=\"string\">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure></p>\n<p>And that was my challenge! I hope you had fun solving it and (hopefully) also learned something new while doing it. 😃</p>\n",
            "tags": [
                "Writeup",
                "security",
                "eBPF",
                "bi0s"
            ]
        },
        {
            "id": "https://the-m3chanic.github.io/2024/01/26/Writeup-Secure-Computing-IRIS-CTF-2024/",
            "url": "https://the-m3chanic.github.io/2024/01/26/Writeup-Secure-Computing-IRIS-CTF-2024/",
            "title": "Secure Computing - Iris CTF 2024 Writeup",
            "date_published": "2024-01-26T01:12:26.000Z",
            "content_html": "<p>Note: My team and I didn't end up solving this during the CTF, we got very close though. This writeup goes through the steps I took to finish solving the challenge after the CTF ended. Hopefully you learn a thing or two 😃</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Your own secure computer can check the flag! Might have forgotten to add the logic to the program, but I think if you guess enough, you can figure it out. Not sure</span><br></pre></td></tr></table></figure></p>\n<p>The description seems to hint at something related to &quot;secure computing&quot;, and so does the challenge name. Interesting, we shall see.</p>\n<h2 id=\"understanding-the-challenge\"><a class=\"anchor\" href=\"#understanding-the-challenge\">#</a> Understanding the challenge</h2>\n<p>Opening the file up in IDA, we see this</p>\n<p><img data-src=\"/images/post_images/Writeup-Secure-Computing-IRIS-CTF/IDA_main.png\" alt=\"IDA main\" /></p>\n<p>It's passing our input (flag) as arguments to a syscall, in the form of 6 Qwords.<br />\nCalling syscall <em>0x1337</em> seems a little odd - because it obviously does not <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtb3MvZG9jcy8rL21hc3Rlci9jb25zdGFudHMvc3lzY2FsbHMubWQ=\">exist</span> - so what's going on here?</p>\n<p>A quick google search with select keywords seems to point us in a single direction</p>\n<p><img data-src=\"/images/post_images/Writeup-Secure-Computing-IRIS-CTF/keyword_search.png\" alt=\"keyword search\" /></p>\n<p>&lt;br&gt;</p>\n<p>The man page of the  <code>seccomp</code>  syscall gives us this<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The seccomp() system call operates on the Secure Computing (seccomp) state </span><br><span class=\"line\">of the calling process.</span><br></pre></td></tr></table></figure><br />\n<strong>What does that mean?</strong></p>\n<h2 id=\"understanding-seccomp\"><a class=\"anchor\" href=\"#understanding-seccomp\">#</a> Understanding Seccomp</h2>\n<p>Seccomp (or Secure Computing) is a security feature in the Linux kernel that provides an additional layer of protection for applications by restricting the system calls that they make. System calls are the interface between user-space applications and the kernel, allowing programs to request services from the operating system.</p>\n<p>Some important (and interesting) features of Seccomp:</p>\n<ul>\n<li>It allows you to define a filter that specifies which system calls are permitted for a particular process. By default, all syscalls are allowed, but with seccomp, you can create a &quot;policy&quot; that restricts this set.</li>\n<li>It uses BPF (Berkeley Packet Filter), which is a virtual machine that can execute a set of instructions to filter system calls. Think of BPF as a &quot;javascript for your kernel&quot;, because it resides in a VM on the kernel and responds to specific events that occur on the system to which it is attached. The filters are written using BPF assembly or even C, which are then compiled to BPF bytecode.</li>\n<li>It offers mainly 2 modes of operation - <em>strict</em> &amp; <em>filter</em>. In strict mode, the process starts with a seccomp filter in place, and any attempt to make an unallowed system call results in the termination of the process. Whereas in filter mode, the filter is applied only when explicitly requested by the process (we will look at the &quot;how&quot; of this later).</li>\n</ul>\n<p>Looking for syscalls with the calling number  <code>317</code>  (seccomp's syscall number), we find this</p>\n<p><img data-src=\"/images/post_images/Writeup-Secure-Computing-IRIS-CTF/syscall_1337.png\" alt=\"Seccomp syscall\" /></p>\n<p>Hmm, let's look at the arguments passed to it<br />\nThe prototype of the seccomp syscall looks like this:<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syscall(SYS_seccomp, unsigned int operation, unsigned int flags, void *args);</span><br></pre></td></tr></table></figure></p>\n<p>Here, it seems like  <code>operation</code>  is set to 1<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The system calls allowed are defined by a pointer to a Berkeley Packet </span><br><span class=\"line\">Filter (BPF) passed via args.  This argument is a pointer to a struct </span><br><span class=\"line\">sock_fprog; it can be designed to filter arbitrary system calls and </span><br><span class=\"line\">system call arguments.  If the filter is invalid, seccomp() fails,</span><br><span class=\"line\">returning EINVAL in errno.</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In order to use the SECCOMP_SET_MODE_FILTER operation, either the calling </span><br><span class=\"line\">thread must have the CAP_SYS_ADMIN capability in its user namespace, or the </span><br><span class=\"line\">thread must already have the no_new_privs bit set.  If that bit was not </span><br><span class=\"line\">already set by an ancestor of this thread, the thread must make the following</span><br><span class=\"line\">call:</span><br><span class=\"line\"></span><br><span class=\"line\">    prctl(PR_SET_NO_NEW_PRIVS, 1);</span><br></pre></td></tr></table></figure></p>\n<p>Both of these are being done in our binary. Let us see what the man page says about those BPF instructions containing the actual filters for our input, which will allow us to solve the challenge.</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">When adding filters via SECCOMP_SET_MODE_FILTER, args points to a filter</span><br><span class=\"line\">program:</span><br><span class=\"line\"></span><br><span class=\"line\">   struct sock_fprog &#123;</span><br><span class=\"line\">       unsigned short      len;    /* Number of BPF instructions */</span><br><span class=\"line\">       struct sock_filter *filter; /* Pointer to array of</span><br><span class=\"line\">                                      BPF instructions */</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Each program must contain one or more BPF instructions:</span><br><span class=\"line\"></span><br><span class=\"line\">   struct sock_filter &#123;            /* Filter block */</span><br><span class=\"line\">       __u16 code;                 /* Actual filter code */</span><br><span class=\"line\">       __u8  jt;                   /* Jump true */</span><br><span class=\"line\">       __u8  jf;                   /* Jump false */</span><br><span class=\"line\">       __u32 k;                    /* Generic multiuse field */</span><br><span class=\"line\">   &#125;;</span><br></pre></td></tr></table></figure></p>\n<p>Found our instructions!<br />\nSo now our approach would be to extract these instructions and disassemble the BPF bytes to see if we can make sense of the filter and reverse it. But let's see if any tool exists that can already do it for us, just to make our lives a little easier 😃</p>\n<p>Another quick google search leads us to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2RhdmlkOTQyai9zZWNjb21wLXRvb2xz\">seccomp-tools</span>, something that exactly matches the description of what we're looking for.</p>\n<p>To extract the filters from the binary, we simply run:<br />\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">seccomp-tools dump ./chal</span><br></pre></td></tr></table></figure></p>\n<p>But doing this yields no result, why's that?<br />\nReading the GitHub page of seccomp-tools, we can see this<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dumps the seccomp BPF from an execution file. This work is done by utilizing </span><br><span class=\"line\">the ptrace syscall.</span><br></pre></td></tr></table></figure><br />\nAnd we have a ptrace syscall in our binary, which is obviously causing the issue - so let's patch that out.</p>\n<p>Now running seccomp-tools:<br />\n<img data-src=\"/images/post_images/Writeup-Secure-Computing-IRIS-CTF/seccomp_dump.png\" alt=\"image\" /></p>\n<p>Bingo!</p>\n<p>But one thing we have to keep in mind, is the loop in which  <code>seccomp</code>  is being called. Note that it is not just one filter being set, it is <em>eight</em> of them.</p>\n<p><img data-src=\"/images/post_images/Writeup-Secure-Computing-IRIS-CTF/8-filters.png\" alt=\"image\" /></p>\n<p><code>v0</code>  is acting as the loop constraint here, making it run for 8 times, meaning 8 filters being set.<br />\nTo dump all 8 filters, we can use the  <code>-l</code>  flag with seccomp-tools.<br />\nAnd to clear out all the other garbage being printed along with the output, we can use a little bit of bash.</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">seccomp-tools dump ./chal -l 8 | grep -v <span class=\"string\">&quot;=======|CODE&quot;</span> | <span class=\"built_in\">cut</span> -d<span class=\"string\">&quot; &quot;</span> -f7- &gt; disasm.txt</span><br></pre></td></tr></table></figure></p>\n<p>Now that we have all 8 filters in a single file, time to solve for the constraints.</p>\n<h2 id=\"solving-the-challenge\"><a class=\"anchor\" href=\"#solving-the-challenge\">#</a> Solving the challenge</h2>\n<p>Looking at the file (and from the challenge, too), we can see that we'll have 6 QWORDS to input, which it checks and returns  <code>KILL</code>  if it's wrong and  <code>ERRNO(0)</code>  if it's correct.<br />\nFirst thing that comes to mind is z3, so let's go for that.</p>\n<p>Here is my script to parse the file and add constraints and &quot;emulate&quot; the filter on my args</p>\n<p><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> z3 <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># solver</span></span><br><span class=\"line\">s = Solver()</span><br><span class=\"line\">INT_BITS = <span class=\"number\">32</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getFlag</span>(<span class=\"params\">model</span>):</span><br><span class=\"line\">    flag = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">6</span>):</span><br><span class=\"line\">        t = model[args[i]].as_long()</span><br><span class=\"line\">        flag += <span class=\"built_in\">bytes</span>.fromhex(<span class=\"built_in\">hex</span>(t)[<span class=\"number\">2</span>:]).decode()[::-<span class=\"number\">1</span>]</span><br><span class=\"line\">        t = model[args2[i]].as_long()</span><br><span class=\"line\">        flag += <span class=\"built_in\">bytes</span>.fromhex(<span class=\"built_in\">hex</span>(t)[<span class=\"number\">2</span>:]).decode()[::-<span class=\"number\">1</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[+] Flag: irisctf&#123;&#123;<span class=\"subst\">&#123;flag&#125;</span>&#125;&#125;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># using BitVecVals instead of python integers because </span></span><br><span class=\"line\"><span class=\"comment\"># they act like a &quot;constant symbol&quot;, and automatically get </span></span><br><span class=\"line\"><span class=\"comment\"># truncated according to size, etc </span></span><br><span class=\"line\">A = BitVecVal(<span class=\"number\">0</span>, INT_BITS)</span><br><span class=\"line\">X = BitVecVal(<span class=\"number\">0</span>, INT_BITS)</span><br><span class=\"line\">sys_number = BitVecVal(<span class=\"number\">0x1337</span>, INT_BITS)</span><br><span class=\"line\">arch = BitVecVal(<span class=\"number\">0xc000003e</span>, INT_BITS)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># splitting our qwords into pairs of dwords, higher and lower </span></span><br><span class=\"line\"><span class=\"comment\"># since bpf uses only 32-bit integers at a maximum anyways </span></span><br><span class=\"line\">args = []</span><br><span class=\"line\">args2 = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># zero initialised since mem is being initialised in the program </span></span><br><span class=\"line\">mem = [<span class=\"number\">0</span>] * <span class=\"number\">16</span></span><br><span class=\"line\">       </span><br><span class=\"line\"><span class=\"comment\"># args is lower DWORD</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">6</span>):</span><br><span class=\"line\">    x = BitVec(<span class=\"string\">f&quot;args[<span class=\"subst\">&#123;i&#125;</span>]&quot;</span>, <span class=\"number\">32</span>)</span><br><span class=\"line\">    args.append(x)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">32</span>, <span class=\"number\">8</span>):</span><br><span class=\"line\">        s.add(Extract(j + <span class=\"number\">7</span>, j, x) &gt;= <span class=\"number\">32</span>)</span><br><span class=\"line\">        s.add(Extract(j + <span class=\"number\">7</span>, j, x) &lt;=<span class=\"number\">127</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># args2 is higher DWORD </span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">6</span>):</span><br><span class=\"line\">    x = BitVec(<span class=\"string\">f&quot;args2[<span class=\"subst\">&#123;i&#125;</span>]&quot;</span>, <span class=\"number\">32</span>)</span><br><span class=\"line\">    args2.append(x)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">32</span>, <span class=\"number\">8</span>):</span><br><span class=\"line\">        s.add(Extract(j + <span class=\"number\">7</span>, j, x) &lt;= <span class=\"number\">127</span>)</span><br><span class=\"line\">        s.add(Extract(j + <span class=\"number\">7</span>, j, x) &gt;= <span class=\"number\">32</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;disasm.txt&quot;</span>) <span class=\"keyword\">as</span> disassembly:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line_number, line <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(disassembly):</span><br><span class=\"line\">        line = line.strip()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># ignore all return and kill statements, not needed for our solver</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">&quot;return&quot;</span> <span class=\"keyword\">in</span> line:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"string\">&quot; &gt;&gt; &quot;</span> <span class=\"keyword\">in</span> line: <span class=\"comment\"># upper DWORD being extracted</span></span><br><span class=\"line\">            line = line.replace(<span class=\"string\">&quot; &gt;&gt; 32&quot;</span>, <span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot;args&quot;</span>, <span class=\"string\">&quot;args2 &quot;</span>)</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\"># lines where constraint for our input comes in </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">&quot;goto&quot;</span> <span class=\"keyword\">in</span> line:</span><br><span class=\"line\">            temp_line = line.split()</span><br><span class=\"line\">            lhs = temp_line[<span class=\"number\">1</span>][<span class=\"number\">1</span>:]</span><br><span class=\"line\">            rhs = temp_line[<span class=\"number\">3</span>][:-<span class=\"number\">1</span>]</span><br><span class=\"line\">            rhs = <span class=\"built_in\">eval</span>(rhs)</span><br><span class=\"line\">            s.add(A == rhs)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">exec</span>(line)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># if A is an integer and not a BitVector, make sure it is </span></span><br><span class=\"line\">        <span class=\"comment\"># within the 32-bit limit </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(A) == <span class=\"built_in\">int</span>:</span><br><span class=\"line\">            A = A % (<span class=\"number\">2</span> ** INT_BITS)</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">assert</span> s.check() == sat</span><br><span class=\"line\">model = s.model()</span><br><span class=\"line\"></span><br><span class=\"line\">getFlag(model)</span><br></pre></td></tr></table></figure></p>\n<p>That's one way to solve it, but one way doesn't cut it, does it?</p>\n<p>After the CTF, I came across <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rbGVlLmdpdGh1Yi5pbw==\">Klee</span>. Klee, you could say, is a Symbolic Virtual Machine (Solver), that allows you to symbolically execute a C source file. This is advantageous for 2 main reasons:</p>\n<ul>\n<li>You don't have to bother about having to convert C source to Python (to have to apply Z3 on it to solve symbolically)</li>\n<li>While converting from C to Python, we don't have to worry about stuff like signedness and typecasting 😃</li>\n</ul>\n<p>Klee is a symbolic execution engine that explores program paths symbolically, treating variables as symbols rather than with concrete values. It is built on top of the LLVM compiler infrastructure, so this integration allows it to work easily with programs written in C/C++, and leverage LLVM capabilities for program analysis and transformation.</p>\n<h4 id=\"install-klee\"><a class=\"anchor\" href=\"#install-klee\">#</a> <strong>Install Klee</strong></h4>\n<p>Install <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwv\">Docker</span> (since that is what I used to run Klee on this)</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull klee/klee</span><br><span class=\"line\">docker run --<span class=\"built_in\">rm</span> -ti --<span class=\"built_in\">ulimit</span>=<span class=\"string\">&#x27;stack=-1:-1&#x27;</span> klee/klee</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"convert-c-source-to-bitcode\"><a class=\"anchor\" href=\"#convert-c-source-to-bitcode\">#</a> <strong>Convert C source to Bitcode</strong></h4>\n<p>(Bitcode is the format of code that Klee operates on. It is the LLVM IR representation of the code used by compiler chains like  <code>clang</code> )<br />\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clang -emit-llvm -c &lt;filename&gt;.c</span><br><span class=\"line\">klee &lt;filename&gt;.bc</span><br></pre></td></tr></table></figure></p>\n<p>This will generate a directory with a number (indicating the number of times you've run Klee on the file so far),  <code>klee-last</code>  is the directory with the information on the file that was last symbolically executed with Klee.</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> klee-assert/ | grep assert </span><br><span class=\"line\">ktest-tool klee-latest/&lt;files_output_from_previous_command&gt;</span><br></pre></td></tr></table></figure></p>\n<p>The files are output in a format  <code>test&lt;number&gt;.assert.err</code> .</p>\n<p>To run Klee on your C-source, simply run<br />\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ktest-tool klee-last/test&lt;number&gt;.ktest</span><br></pre></td></tr></table></figure></p>\n<p><strong>To generate the filter.c files to run using Klee, you can do the following</strong>:<br />\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">seccomp-tools dump ./chal -l 8 &gt; full_disasm.txt</span><br></pre></td></tr></table></figure><br />\n&lt;br&gt;</p>\n<p>Followed by a script to split these files and parse them, then convert them to C files in the format the Klee expects<br />\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># split the large output into 8 separate files properly </span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">split_files</span>(<span class=\"params\">filename</span>):</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filename, <span class=\"string\">&quot;r&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        disassembly = f.readlines()</span><br><span class=\"line\"></span><br><span class=\"line\">    LINES_PER_FILE=<span class=\"number\">3797</span></span><br><span class=\"line\">    i = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> disassembly:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i % LINES_PER_FILE == <span class=\"number\">0</span>):</span><br><span class=\"line\">            <span class=\"comment\"># open the next file to disassemble </span></span><br><span class=\"line\">            file_number = i // LINES_PER_FILE</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>):</span><br><span class=\"line\">                f.close()</span><br><span class=\"line\">                f = <span class=\"built_in\">open</span>(<span class=\"string\">f&quot;disassembly_<span class=\"subst\">&#123;file_number&#125;</span>.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                f = <span class=\"built_in\">open</span>(<span class=\"string\">f&quot;disassembly_<span class=\"subst\">&#123;file_number&#125;</span>.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">        f.write(<span class=\"string\">&#x27; &#x27;</span>.join(line.split()[<span class=\"number\">5</span>:]) + <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">        i += <span class=\"number\">1</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">program_head = <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">#include &lt;stdint.h&gt;</span></span><br><span class=\"line\"><span class=\"string\">#include &lt;stdbool.h&gt;</span></span><br><span class=\"line\"><span class=\"string\">#include &lt;stdlib.h&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#include &lt;assert.h&gt;</span></span><br><span class=\"line\"><span class=\"string\">#include &quot;klee/klee.h&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#define ERRNO(x) (x)</span></span><br><span class=\"line\"><span class=\"string\">#define KILL 2</span></span><br><span class=\"line\"><span class=\"string\">#define ALLOW 1</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#define EM_X86_64 62</span></span><br><span class=\"line\"><span class=\"string\">#define __AUDIT_ARCH_64BIT 0x80000000</span></span><br><span class=\"line\"><span class=\"string\">#define __AUDIT_ARCH_LE 0x40000000</span></span><br><span class=\"line\"><span class=\"string\">#define AUDIT_ARCH_X86_64 (EM_X86_64 | __AUDIT_ARCH_64BIT | __AUDIT_ARCH_LE)</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">prog_main = <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">int main(int argc, char * argv[]) &#123;</span></span><br><span class=\"line\"><span class=\"string\">    uint64_t args[6];</span></span><br><span class=\"line\"><span class=\"string\">    klee_make_symbolic(args, sizeof(args), &quot;args&quot;);</span></span><br><span class=\"line\"><span class=\"string\">    uint8_t result = filter(args);</span></span><br><span class=\"line\"><span class=\"string\">    // Did the filter return zero?</span></span><br><span class=\"line\"><span class=\"string\">    klee_assume(result == 0);</span></span><br><span class=\"line\"><span class=\"string\">    // If we reach this point, we found a solution</span></span><br><span class=\"line\"><span class=\"string\">    klee_assert(0);</span></span><br><span class=\"line\"><span class=\"string\">    return 0;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">function_init = <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">uint8_t filter(uint64_t args[6]) &#123;</span></span><br><span class=\"line\"><span class=\"string\">    // initialize memory and registers</span></span><br><span class=\"line\"><span class=\"string\">    uint32_t A = 0;</span></span><br><span class=\"line\"><span class=\"string\">    uint32_t X = 0;</span></span><br><span class=\"line\"><span class=\"string\">    // fix architecture and syscall number</span></span><br><span class=\"line\"><span class=\"string\">    uint32_t sys_number = 0x1337;</span></span><br><span class=\"line\"><span class=\"string\">    uint32_t arch = AUDIT_ARCH_X86_64;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    uint32_t mem[16] = &#123;0&#125;;</span></span><br><span class=\"line\"><span class=\"string\">    [FUNCTION BODY]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># return the line number that control flow will go to, given a line</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">goto_target</span>(<span class=\"params\">line: <span class=\"built_in\">str</span></span>):</span><br><span class=\"line\">    line = line.split()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> line[<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># generate function body </span></span><br><span class=\"line\"><span class=\"comment\"># need to keep track of line number, starting from 1, to insert goto_label into line</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">parse_disassembly</span>(<span class=\"params\">disassembly</span>):    </span><br><span class=\"line\">    c_code = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> line_number, line <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(disassembly):</span><br><span class=\"line\">        line_number += <span class=\"number\">1</span>  <span class=\"comment\"># line number is normally zero-indexed</span></span><br><span class=\"line\">        <span class=\"comment\"># if line has a goto statement, most important </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">&quot;goto&quot;</span> <span class=\"keyword\">in</span> line:</span><br><span class=\"line\">            <span class=\"comment\"># store line number and insert &quot;LABEL_&quot; + line_number + &quot;_&quot; in next line </span></span><br><span class=\"line\">            goto_line = goto_target(line)</span><br><span class=\"line\">            <span class=\"comment\"># insert label</span></span><br><span class=\"line\">            c_code += line.replace(<span class=\"built_in\">str</span>(goto_line), <span class=\"string\">f&quot;LABEL_<span class=\"subst\">&#123;goto_line&#125;</span>&quot;</span>)</span><br><span class=\"line\">            c_code += <span class=\"string\">&quot;LABEL_&quot;</span> + goto_line + <span class=\"string\">&quot;: &quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            c_code += line </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> c_code </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    split_files(<span class=\"string\">&quot;full_disasm.txt&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># iterate through all the disassembly files to parse out </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> file_number <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">8</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">f&quot;disassembly_<span class=\"subst\">&#123;file_number&#125;</span>.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            disassembly = f.readlines()</span><br><span class=\"line\"></span><br><span class=\"line\">        c_code = parse_disassembly(disassembly)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">f&quot;filter_<span class=\"subst\">&#123;file_number&#125;</span>.c&quot;</span>, <span class=\"string\">&quot;w&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            program = program_head + <span class=\"string\">&quot;\\n\\n&quot;</span> + function_init.replace(<span class=\"string\">&quot;[FUNCTION BODY]&quot;</span>, c_code) + prog_main </span><br><span class=\"line\">            f.write(program)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure></p>\n<p>All in all, this was a very fun challenge for me to solve - with lots to learn. GGs to the author from IrisSec for making such a unique challenge!</p>\n",
            "tags": [
                "Writeup",
                "security",
                "ctf",
                "IrisCTF",
                "reversing"
            ]
        }
    ]
}